local Bounds = require("Bounds")
local lovecase = require("libs.lovecase")

local test = lovecase.newTestSet("Bounds")

test:group("type()", function ()
  test:run("should return the typename", function ()
    test:assertEqual("loveshape.Bounds", Bounds.new():type())
  end)
end)

test:group("new()", function ()
  test:run("should create bounds with infinite dimensions", function ()
    local bounds = Bounds.new()
    test:assertEqual({math.huge, math.huge, -math.huge, -math.huge}, {bounds:unpack()})
  end)
end)

test:group("set()", function ()
  test:run("should set the dimensions of the bounds object", function ()
    local bounds = Bounds.new()
    bounds:set(10, 20, 30, 40)
    test:assertEqual({10, 20, 30, 40}, {bounds:unpack()})
  end)
end)

test:group("getRect()", function ()
  test:run("should return the rectangle of the bounds", function ()
    local bounds = Bounds.new():set(10, 10, 25, 35)
    test:assertEqual({10, 10, 15, 25}, {bounds:getRect()})
  end)
end)

test:group("isEmpty()", function ()
  test:run("should initially return true", function ()
    test:assertTrue(Bounds.new():isEmpty())
  end)
  test:run("should return false for non-empty bounds", function ()
    test:assertFalse(Bounds.new():set(0, 0, 1, 1):isEmpty())
  end)
end)

test:group("reset()", function ()
  test:run("should reset the bounds to infinite dimensions", function ()
    local bounds = Bounds.new():set(0, 0, 10, 10)
    bounds:reset()
    test:assertEqual({math.huge, math.huge, -math.huge, -math.huge}, {bounds:unpack()})
  end)
end)

test:group("getWidth()", function ()
  test:run("should get the width of the bounds", function ()
    local bounds = Bounds.new():set(10, 20, 33, 44)
    test:assertEqual(23, bounds:getWidth())
  end)
end)

test:group("getHeight()", function ()
  test:run("should get the height of the bounds", function ()
    local bounds = Bounds.new():set(10, 20, 33, 44)
    test:assertEqual(24, bounds:getHeight())
  end)
end)

test:group("copyFrom()", function ()
  test:run("should copy the values from the specified bounds", function ()
    local bounds1 = Bounds.new()
    local bounds2 = Bounds.new():set(10, 20, 30, 40)
    bounds1:copyFrom(bounds2)
    test:assertEqual(bounds2, bounds1)
  end)
end)

test:group("addPoint()", function ()
  test:run("should extend the bounds to contain the point", function ()
    local bounds = Bounds.new()
    bounds:addPoint(10, 20)
    test:assertEqual({10, 20, 10, 20}, {bounds:unpack()})
    bounds:addPoint(5, 20)
    test:assertEqual({5, 20, 10, 20}, {bounds:unpack()})
    bounds:addPoint(5, 15)
    test:assertEqual({5, 15, 10, 20}, {bounds:unpack()})
    bounds:addPoint(15, 20)
    test:assertEqual({5, 15, 15, 20}, {bounds:unpack()})
    bounds:addPoint(15, 25)
    test:assertEqual({5, 15, 15, 25}, {bounds:unpack()})
    bounds:addPoint(5, 15)
    test:assertEqual({5, 15, 15, 25}, {bounds:unpack()})
  end)
end)

return test